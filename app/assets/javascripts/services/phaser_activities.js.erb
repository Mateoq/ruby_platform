'use strict';
prServices.factory('graphicService', ['$rootScope', '$route', '$timeout', function($rootScope, $route, $timeout){
	var service, graphicBars, pictogram;

	service = function (options, game, done, callback) {
		service.data = options;
		service.game = game;

        service.game.state.add('boot', service.boot);
		service.game.state.start('boot');

		service.totalCounter = 0;
		service.done = done;
		service.updateUserProgress = callback;
	};

    service.methods = [ "graphicBars", "pictogram" ];

	service.boot = {
        init: function (){

            if (service.data.hasOwnProperty('maxWidth')) {
                service.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
//              service.game.scale.setScreenSize(true);
                service.game.scale.refresh();
                service.game.scale.setMinMax(300, service.data.maxHeight, service.data.maxWidth, service.data.maxHeight);
            }
        },
        create: function (){
            var method = service.methods[service.data.method];
            service.game.state.add(method, service[method]);
            service.game.state.start(method);
        }
    };

	service.graphicBars = {
		positions: null,
		positions2: null,
		corte: [],
		tween: [],
		bars: [],
		btn: [],
		media: false,
        resetProperties: function (){
            this.positions = null;
            this.positions2 = null;
            this.corte = [];
            this.tween = [];
            this.bars = [];
            this.btn = [];
            this.media = false;
        },
		preload: function (){
            this.resetProperties();
			service.game.renderer.resize(service.data.width, service.data.height);
			service.game.load.atlasJSONArray('atlas', service.data.atlasPath, null, service.data.atlasJson);
            this.media = service.data.media;

            if (!service.data.buttons) {
                this.positions = service.data.bars;

                if (this.media) {
                	this.positions2 = service.data.medias;
                	this.tween2 = [];
                 	this.corte2 = [];
                 	this.line = null; this.corteLinea = null;
                	this.animarLinea = null; this.bars2 = [];
            	}
            } else {
                this.positions = service.data.buttons;
                this.positions2 = service.data.bars;
            }
		},
		create: function (){
            var self = this;
			service.game.add.image(0,0, 'atlas','bg');
			
			for (var i = 0; i < this.positions.length; i++) {
				this.bars[i] = (service.data.buttons) ? service.game.add.sprite(this.positions2[i].x, this.positions2[i].y,'atlas', this.positions2[i].name)
											: service.game.add.sprite(this.positions[i].x, this.positions[i].y,'atlas', this.positions[i].name);

                if (service.data.horizontal) {
                    this.bars[i].anchor.setTo(0,0.5);
                    this.bars[i].visible = false;
                    this.corte[i] = new Phaser.Rectangle(0,0,0,this.bars[i].height);
                    this.tween[i] = service.game.add.tween(this.corte[i]).to({width: this.bars[i].width},500,Phaser.Easing.Linear.Out,false,0,0,false);
                } else {
                    this.bars[i].anchor.setTo(0.5,1);
                    this.bars[i].visible = false;
                    this.corte[i] = new Phaser.Rectangle(0, 0, this.bars[i].width, 0);
                    this.tween[i] = service.game.add.tween(this.corte[i]).to({height: this.bars[i].height}, 1000, Phaser.Easing.Linear.Out, false, 0, 0, false);
                }

				if (!this.media && this.positions2) {
//                    this.btn[i] = service.game.add.button(this.positions[i].x, this.positions[i].y,'atlas',function (button){
//						var b = this.btn.indexOf(button);
//						this.animacion(this.bars[b], this.corte[b], this.tween[b]);
//					},this, this.positions[i].btn, this.positions[i].btn);
//					this.btn[i].input.useHandCursor = true;

                    this.btn[i] = service.game.add.sprite(this.positions[i].x, this.positions[i].y,'atlas', this.positions[i].btn);
                    this.btn[i].inputEnabled = true;
                    this.btn[i].input.useHandCursor = true;
                    this.btn[i].events.onInputDown.add(function (button){
                        var b = self.btn.indexOf(button);
                        self.animacion(self.bars[b], self.corte[b], self.tween[b]);
                    }, this);

				}
			}

			if (this.media) {
				for (var c = 0; c < this.positions2.length; c++) {
					this.bars2[c] = service.game.add.sprite(this.positions2[c].x, this.positions2[c].y,'atlas',this.positions2[c].name);
					this.bars2[c].visible = false;

					this.corte2[c] = new Phaser.Rectangle(0,0,this.bars2[c].width,0);
					this.tween2[c] = service.game.add.tween(this.corte2[c]).to({height:this.bars2[c].height}, 1000, Phaser.Easing.Linear.Out, false, 0, 0, false);
				}

				this.bars2[0].anchor.setTo(0.5,0);
				this.bars2[1].anchor.setTo(0.5,1);
				this.bars2[2].anchor.setTo(0.5,0);

				this.line = service.game.add.sprite(99,121,'atlas','line');
				this.line.visible = false;
				this.corteLinea = new Phaser.Rectangle(0,0,0,this.line.height);
				this.animarLinea = service.game.add.tween(this.corteLinea).to({width:this.line.width},1000,Phaser.Easing.Linear.In,false,0,0,false);
			}

			if (service.done) {
				if (!this.media && this.positions2) {
					for (var i = 0; i < this.bars.length; i++) {
	    				this.animacion(this.bars[i], this.corte[i], this.tween[i]);
	            	}

	            	return;
				}
				this.animacion();
				return;
			}

			if (!service.data.buttons) {
				service.game.input.onDown.add(this.animacion, this);
			}

		},
		animacion: function (bar, corte, tween){
			if (!this.positions2 || this.media) {
				for (var i = 0; i < this.bars.length; i++) {
					if (this.bars[i].visible) { continue; }
					service.totalCounter++;
					this.bars[i].visible = true;
					this.bars[i].crop(this.corte[i]);
					this.tween[i].start();
					
					if (this.media) {
						// this.tween[i]._lastChild.onComplete.add(this.linea,this);
						this.tween[i].onComplete.add(this.linea,this);
					}
				}
			} else {
				if (bar.visible) { return; }
				service.totalCounter++;
				bar.visible = true;
				tween.start(0);
				bar.crop(corte);
			}

			if (this.bars.length != service.totalCounter || service.done || angular.isUndefined(service.updateUserProgress)) { return; }

			service.updateUserProgress();
		},
		update: function (){
			for (var i = 0; i < this.bars.length; i++) {
				this.bars[i].updateCrop();
			}

			if (this.media) {
				for (var c = 0; c < this.positions2.length; c++) {
					this.bars2[c].updateCrop();
				}

				this.line.updateCrop();
			}
		},
		linea : function(){
			this.line.visible = true;
			this.line.crop(this.corteLinea);
			this.animarLinea.start();
			this.animarLinea.onComplete.addOnce(this.animacionSalida,this);
		},
		animacionSalida : function(){
			for (var i = 0; i < 3; i++) {
				this.bars2[i].visible = true;
				this.bars2[i].crop(this.corte2[i]);
				this.tween2[i].start();
			}
		}
	};

	service.pictogram = {
		pos: null,
		dias: [],
		barras: [],
		corte: [],
		anim: [],
		n: null,
		grupo: [],
		resetProperties: function () {
			this.pos = null;
			this.dthisias = [];
			this.barras = [];
			this.corte = [];
			this.anim = [];
			this.n = null;
			this.grupo = [];
		},
		preload: function (){
			this.resetProperties();
			this.pos = service.data.positions;
			service.game.load.atlasJSONArray('atlas', service.data.atlasPath, null, service.data.atlasJson);
		},
		create: function (){
			var self = this;
			for (var i = 0; i < 7; i++) {
				this.barras[i] = service.game.add.sprite(0, this.pos[i].y,'atlas', 'barra');
				this.barras[i].visible = false;
				// barras[i].anchor.setTo(0.5,1);
				this.dias[i] = service.game.add.sprite(0,this.pos[i].y, 'atlas',this.pos[i].dia);
				this.dias[i].inputEnabled = true;
				this.dias[i].input.useHandCursor = true;
				this.dias[i].events.onInputDown.add(function (button) {
					var index = this.dias.indexOf(button);	
					this.n = index;
					this.barra(this.barras[index], this.anim[index], this.corte[index]);
				},this);
				this.corte[i] = new Phaser.Rectangle(0, 0, 0, this.barras[i].height);
				this.anim[i] = service.game.add.tween(this.corte[i]).to({width: this.barras[i].width}, 1000, Phaser.Easing.Linear.Out,false, 0,0,false);
				this.grupo[i] = service.game.add.group();
				this.grupo[i].alpha = 0;
			}

			if (service.done || service.data.animationOnly) {
				for (var j = 0; j < this.barras.length; j++) {
					this.barra(this.barras[j], this.anim[j], this.corte[j], j);
				}
			}
		},
		update: function (){
			for (var i = 0; i < this.barras.length; i++) {
				this.barras[i].updateCrop();
			}
		},
		barra: function (barra, anim, corte, index){
			if (barra.visible) { return; }

			for (var i = 0; i < this.dias.length; i++) {
				this.dias[i].inputEnabled = false;
				this.dias[i].input.useHandCursor = false;
			}

			service.totalCounter++;

			barra.visible = true;
			barra.crop(corte);
			if (service.done || service.data.animationOnly) {
				var self = this;
				$timeout(function () {
					self.otra(index);					
				}, 800);
			} else {
				anim.onComplete.add(this.otra,this);
			}
			anim.start(0);

			if (this.barras.length != service.totalCounter || service.done || angular.isUndefined(service.updateUserProgress)) { return; }


			service.updateUserProgress();
		},
		otra: function (index){
			var pos2 = service.data.positions2,
				p = service.data.itemsPositions;

			var n = (service.done || service.data.animationOnly) ? index : this.n;
			for (var i = 0; i < p[n].times; i++) {
				this.grupo[n].create(pos2[i].x, p[n].first, 'atlas', 'pre');
				service.game.add.tween(this.grupo[n]).to({alpha:1}, 800, Phaser.Easing.Linear.None, true,0,0,false).delay(1000);	
			}

			for (var i = 0; i < this.dias.length; i++) {
				this.dias[i].inputEnabled = true;
				this.dias[i].input.useHandCursor = true;
			}
		}
	};

	return service;
}]);