'use strict';
prServices.factory('graphicService', ['$rootScope', '$route', '$timeout', function($rootScope, $route, $timeout){
	var service, graphicBars, pictogram;

	service = function (options, game) {
		service.data = options;
		service.game = game;
		
		var method = service.methods[service.data.method];
		service.game.state.add(method, service[method]);
		service.game.state.start(method);
	};

	service.methods = [ "graphicBars", "pictogram" ];

	service.graphicBars = {
		positions: null,
		positions2: null,
		corte: [],
		tween: [],
		bars: [],
		btn: [],
		media: false,
		preload: function (){
			service.game.renderer.resize(service.data.width, service.data.height);
			service.game.load.atlasJSONArray('atlas', service.data.atlasPath, null, service.data.atlasJson);
			this.positions = service.data.buttons;
			this.positions2 = service.data.bars;
			this.media = service.data.media;

			if (this.media) {
				this.line = null; this.corteLinea = null; 
				this.animarLinea = null; this.bars2 = []; 
				this.tween2 = []; this.corte2 = [];
				this.positions = service.data.bars;
				this.positions2 = service.data.medias;
			}
		},
		create: function (){
			service.game.add.image(0,0, 'atlas','bg');
			
			for (var i = 0; i < this.positions.length; i++) {
				this.bars[i] = (!this.media) ? service.game.add.sprite(this.positions2[i].x, this.positions2[i].y,'atlas', this.positions2[i].name)
											: service.game.add.sprite(this.positions[i].x, this.positions[i].y,'atlas', this.positions[i].name);
				this.bars[i].anchor.setTo(0.5,1);
				this.bars[i].visible = false;
				this.corte[i] = new Phaser.Rectangle(0,0,this.bars[i].width,0);
				this.tween[i] = service.game.add.tween(this.corte[i]).to({height: this.bars[i].height}, 1000, Phaser.Easing.Linear.Out, false, 0,0, false);

				if (!this.media) {
					this.btn[i] = service.game.add.button(this.positions[i].x, this.positions[i].y,'atlas',function (button){
						var b = this.btn.indexOf(button);
						this.animacion(this.bars[b], this.corte[b], this.tween[b]);
					},this, this.positions[i].btn, this.positions[i].btn);
					this.btn[i].input.useHandCursor = true;
				}
			}

			if (this.media) {
				for (var c = 0; c < this.positions2.length; c++) {
					this.bars2[c] = service.game.add.sprite(this.positions2[c].x, this.positions2[c].y,'atlas',this.positions2[c].name);
					this.bars2[c].visible = false;

					this.corte2[c] = new Phaser.Rectangle(0,0,this.bars2[c].width,0);
					this.tween2[c] = service.game.add.tween(this.corte2[c]).to({height:this.bars2[c].height}, 1000, Phaser.Easing.Linear.Out, false, 0, 0, false);
				}

				this.bars2[0].anchor.setTo(0.5,0);
				this.bars2[1].anchor.setTo(0.5,1);
				this.bars2[2].anchor.setTo(0.5,0);

				this.line = service.game.add.sprite(99,121,'atlas','line');
				this.line.visible = false;
				this.corteLinea = new Phaser.Rectangle(0,0,0,this.line.height);
				this.animarLinea = service.game.add.tween(this.corteLinea).to({width:this.line.width},1000,Phaser.Easing.Linear.In,false,0,0,false);

				service.game.input.onDown.add(this.animacion, this);
			}

		},
		animacion: function (bar, corte, tween){
			console.log(bar);
			if (this.media) {
				for (var i = 0; i < this.positions.length; i++) {
					this.bars[i].visible = true;
					this.bars[i].crop(this.corte[i]);
					this.tween[i].start();
					this.tween[i]._lastChild.onComplete.add(this.linea,this);
				}
			} else {
				bar.visible = true;
				tween.start(0);
				bar.crop(corte);
			}
		},
		update: function (){
			for (var i = 0; i < this.positions.length; i++) {
				this.bars[i].updateCrop();
			}

			if (this.media) {
				for (var c = 0; c < this.positions2.length; c++) {
					this.bars2[c].updateCrop();
				}

				this.line.updateCrop();
			}
		},
		linea : function(){
			this.line.visible = true;
			this.line.crop(this.corteLinea);
			this.animarLinea.start();
			this.animarLinea.onComplete.addOnce(this.animacionSalida,this);
		},
		animacionSalida : function(){
			for (var i = 0; i < 3; i++) {
				this.bars2[i].visible = true;
				this.bars2[i].crop(this.corte2[i]);
				this.tween2[i].start();
			}
		}
	};

	service.pictogram = {
		pos: null,
		dias: [],
		barras: [],
		corte: [],
		anim: [],
		n: null,
		grupo: [],
		preload: function (){
			this.pos = service.data.positions;
			service.game.renderer.resize(service.data.width, service.data.height);
			service.game.load.atlasJSONArray('atlas', service.data.atlasPath, null, service.data.atlasJson);
		},
		create: function (){
			var self = this;
			for (var i = 0; i < 7; i++) {
				this.barras[i] = service.game.add.sprite(0, this.pos[i].y,'atlas', 'barra');
				this.barras[i].visible = false;
				// barras[i].anchor.setTo(0.5,1);
				this.dias[i] = service.game.add.button(0, this.pos[i].y, 'atlas',function (button) {
					var index = self.dias.indexOf(button);	
					this.n = index;
					self.barra(self.barras[index], self.anim[index], self.corte[index]);
				} ,this, this.pos[i].dia, this.pos[i].dia);
				this.dias[i].input.useHandCursor = true;
				this.corte[i] = new Phaser.Rectangle(0, 0, 0, this.barras[i].height);
				this.anim[i] = service.game.add.tween(this.corte[i]).to({width: this.barras[i].width}, 1000, Phaser.Easing.Linear.Out,false, 0,0,false);
				this.grupo[i] = service.game.add.group();
				this.grupo[i].alpha = 0;
			}
		},
		update: function (){
			for (var i = 0; i < this.barras.length; i++) {
				this.barras[i].updateCrop();
			}
		},
		barra: function (barra,anim,corte){
			barra.visible = true;
			barra.crop(corte);
			anim.onComplete.add(this.otra,this);
			anim.start(0);
		},
		otra: function (){
			var pos2 = service.data.positions2,
				p = service.data.itemsPositions;

			for (var i = 0; i < p[this.n].times; i++) {
				this.grupo[this.n].create(pos2[i].x, p[this.n].first, 'atlas', 'pre');
				service.game.add.tween(this.grupo[this.n]).to({alpha:1}, 800, Phaser.Easing.Linear.None, true,0,0,false);	
			}
		}
	};

	return service;
}]);

prServices.factory('dragNDropService', function(){
	var service;

	service = function (options, game) {
		service.data = options;
		service.game = game;
		service.assetPositions = service.data.assetPositions;
		service.drops = service.data.drops;
		service.drags = service.data.drags;
		// var method = service.methods[service.data.method];
		service.game.state.add('dragNDropButtons', service.dragNDropButtons);
		service.game.state.start('dragNDropButtons');
	};

	service.dragNDropButtons = {
		right: [], wrong: [], arrows: [], dropItems: [], dragItems: [], staticAssets: [], rightAnswers: 0,
		preload: function () {
			service.game.renderer.resize(service.data.width, service.data.height);
			service.game.load.atlasJSONArray('atlas', service.data.atlasPath, null, service.data.atlasJson);	
		},
		create: function () {
			// Load Assets
			var staticText, answer;
			for (var j = 0; j < service.assetPositions.length; j++) {
				this.staticAssets[j] = service.game.add.sprite(service.assetPositions[j].x, service.assetPositions[j].y, 'atlas', service.assetPositions[j].name);

				if (service.assetPositions[j].hasOwnProperty('text')) {
					staticText = service.game.add.text(service.assetPositions[j].text.x,
							service.assetPositions[j].text.y,
							service.assetPositions[j].text.text,
							service.data.textStyles
						);

					this.staticAssets[j].addChild(staticText);
				}

				if (service.assetPositions[j].hasOwnProperty('answer')) {
					answer = service.game.add.text(service.assetPositions[j].answer.x,
							service.assetPositions[j].answer.y,
							service.assetPositions[j].answer.answer
						);

					answer.updateText();

					angular.forEach(service.data.answerStyles, function (value, key) {
						answer[key] = value;
					});

					answer.alpha = 0

					this.staticAssets[j].addChild(answer);
				}

				if (service.assetPositions[j].hasOwnProperty('icons'))
					this.arrows[j] = service.game.add.sprite(service.assetPositions[j].icons.x, service.assetPositions[j].icons.y, 'atlas', 'icon_arrow');
			}

			// Load Objects
			var drag, text, h, w;
			for (var i = 0; i < service.drops.length; i++) {
				// Load Wrong and Right icons
				this.right[i] = service.game.add.sprite(0, 0,'atlas', 'icon_right');
				this.right[i].alpha = 0;
				this.wrong[i] = service.game.add.sprite(0,0, 'atlas','icon_wrong');
				this.wrong[i].alpha = 0;

				// Load Drop location items
				this.dropItems[i] = service.game.add.sprite(service.drops[i].x, service.drops[i].y, 'atlas', service.drops[i].name);
				service.drops[i].chances = 2;
			}

			// Load Draggable items
			var dragGroups;
			for (var k = 0; k < service.drags.length; k++) {
				this.dragItems[k] = service.game.add.sprite(service.drags[k].x, service.drags[k].y, 'atlas', service.drags[k].name);

				dragGroups = service.game.add.group(this.dragItems[k]);

				if (service.drags[k].hasOwnProperty('text')) {

					text = service.game.add.text(service.data.dragsData.x, service.data.dragsData.y, service.drags[k].text.text, service.data.dragsData.styles);

					text.updateText();

					text.x = this.dragItems[k].width / 2 - (text.width / 2);
					text.y = this.dragItems[k].height / 2 - (text.height / 2);

					dragGroups.add(text);
				}

				this.dragItems[k].scale.set(0.9, 0.9);
				this.dragItems[k].inputEnabled = true;
				this.dragItems[k].input.enableDrag();
				this.dragItems[k].events.onDragStart.add(this.onDragStart, this);
				this.dragItems[k].events.onDragStop.add(this.onValidateDrop, this);
			}
		},
		onDragStart: function (sprite) {
			sprite.scale.setTo(1, 1);
		},
		onValidateDrop: function (sprite) {
			sprite.scale.setTo(0.9,0.9);

			var index = this.dragItems.indexOf(sprite),
				drag = service.drags[index];

			for (var i = 0; i < this.dropItems.length; i++) {
				if (false === sprite.overlap(this.dropItems[i])) continue;

				if (0 === service.drops[i].chances) break;

				var asset = service.assetPositions[i];

				this.arrows[i].alpha = 0;

				if (drag.value === asset.answer.answer) {
					if (drag.hasOwnProperty('text')) {
						this.staticAssets[i].children[1].alpha = 1;
						service.game.add.tween(sprite).to({ alpha: 0 }, 200, Phaser.Easing.Linear.Out, true, 0, 0, true)
													.to({ alpha: 0 }, 200, Phaser.Easing.Linear.Out, true, 0, 0, false);
						service.game.add.tween(this.dropItems[i]).to({ alpha: 0 }, 200, Phaser.Easing.Linear.Out, true, 0, 0, false);
						sprite.inputEnabled = false;
						this.right[i].reset(asset.icons.x, asset.icons.y);
						service.game.add.tween(this.right[i]).to({ alpha: 1 }, 200, Phaser.Easing.Linear.Out, true, 100, 4, true);
						service.drops[i].chances = 0;
						this.rightAnswers++;

						return;
					}

				} else {
					
					service.drops[i].chances--;

					this.wrong[i].reset(asset.icons.x, asset.icons.y);

					var wrongTween = service.game.add.tween(this.wrong[i]).to({ alpha: 1 }, 200, Phaser.Easing.Linear.Out, true, 0, 4, true),
						self = this;

					if (0 === service.drops[i].chances) {
						service.game.add.tween(this.dropItems[i]).to({ alpha: 0 }, 200, Phaser.Easing.Linear.Out, true, 0, 0, false);
						this.staticAssets[i].children[1].alpha = 1;
						service.game.add.tween(sprite).to({ x: drag.x, y: drag.y }, 200, Phaser.Easing.Linear.Out, true);
						return;
					}

					wrongTween.to({ alpha: 0 }, 200, Phaser.Easing.Linear.Out, true, 100, 0, false);
					wrongTween.onComplete.add(function () {
						service.game.time.events.add(200, function () {
							self.arrows[i].alpha = 1;
						}, self);
						
					}, this);
					service.game.add.tween(sprite).to({ x: drag.x, y: drag.y }, 200, Phaser.Easing.Linear.Out, true);

					return;
				}
			}

			

			service.game.add.tween(sprite).to({ x: drag.x, y: drag.y }, 200, Phaser.Easing.Linear.Out, true);
		}
	};

	return service;
});