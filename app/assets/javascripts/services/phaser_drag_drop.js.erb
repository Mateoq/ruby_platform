prServices.factory('dragNDropService', function(){
	var service;

	service = function (options, game, done, callback) {
		service.data = options;
		service.game = game;
		service.assetPositions = service.data.assetPositions;

		service.drops = service.data.drops;
		service.drags = service.data.drags;
		// var method = service.methods[service.data.method];
		service.game.state.add('dragNDropButtons', service.dragNDropButtons);
		service.game.state.start('dragNDropButtons');

		// validation
		service.done = done;
		service.rightAnswers = 0;
		service.totalCounter = 0;
		service.updateUserProgress = callback;
	};

	service.dragNDropButtons = {
		right: [], wrong: [], arrows: [], dropItems: [], dragItems: [], staticAssets: [], rightAnswers: 0, assetKeys: [],
        count: 0, singleTargetPositions: {}, targetGroups: [], audio: null, currentSprite: false,
		init: function () {
			// service.game.renderer.resize(service.data.width, service.data.height);
			// service.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
			// service.game.scale.setScreenSize(true);
			// service.game.scale.refresh();
		},
		preload: function () {
			// this.resetProperties();
			if (service.data.audios) {
				angular.forEach(service.data.audios, function(audio, k){
					service.game.load.audio(audio.name, service.data.resources + audio.file);
				});
			}
			service.game.load.atlasJSONArray('atlas', service.data.atlasPath, null, service.data.atlasJson);	
		},
		create: function () {
			// Load Assets
			var staticText, answer, textStyles, self = this;
			for (var j = 0; j < service.assetPositions.length; j++) {
				this.staticAssets[j] = service.game.add.sprite(service.assetPositions[j].x, service.assetPositions[j].y, 'atlas', service.assetPositions[j].name);

				if (service.assetPositions[j].z) {
					this.staticAssets.z = service.assetPositions[j].z;
				}

				if (service.assetPositions[j].hasOwnProperty('text')) {
					textStyles = service.data.textStyles;

					if (angular.isArray(service.assetPositions[j].text)) {
						angular.forEach(service.assetPositions[j].text, function(t, k){
							staticText = service.game.add.text(t.x, t.y, t.text);

							staticText.updateText();

							angular.forEach(textStyles, function (value, key) {
								if ('wordWrapWidth' === key)
									staticText.wordWrap = true;
								staticText[key] = value;
							});

							staticText.font = 'Open Sans';

							if (textStyles.hasOwnProperty('fontSize'))
								staticText.fontSize = textStyles.fontSize;

							if (textStyles.hasOwnProperty('fontWeight'))
								staticText.fontWeight = textStyles.fontWeight;

							if (textStyles.hasOwnProperty('wrap')) {
								staticText.wordWrap = true;
								staticText.wordWrapWidth = textStyles.wrap;
							} else if (t.hasOwnProperty('wrap')) {
								staticText.wordWrap = true;
								staticText.wordWrapWidth = t.wrap;
							}

							if (textStyles.hasOwnProperty('lineSpacing')) {
								staticText.lineSpacing = textStyles.lineSpacing;
							}

							self.staticAssets[j].addChild(staticText);
						});
					} else {
						if (service.assetPositions[j].text.hasOwnProperty('styles')) {
							textStyles = service.assetPositions[j].text.styles;
						}

						staticText = service.game.add.text(service.assetPositions[j].text.x,
								service.assetPositions[j].text.y,
								service.assetPositions[j].text.text
							);

						angular.forEach(textStyles, function (value, key) {
							if ('wordWrapWidth' === key)
								staticText.wordWrap = true;
							staticText[key] = value;
						});

						if (textStyles.hasOwnProperty('fontSize'))
							staticText.fontSize = textStyles.fontSize;

						if (textStyles.hasOwnProperty('fontWeight'))
							staticText.fontWeight = textStyles.fontWeight;

						if (textStyles.hasOwnProperty('wrap')) {
							staticText.wordWrap = true;
							staticText.wordWrapWidth = textStyles.wrap;
						}

						if (textStyles.hasOwnProperty('lineSpacing')) {
							staticText.lineSpacing = textStyles.lineSpacing;
						}

						this.staticAssets[j].addChild(staticText);
					}
				}

				if (service.assetPositions[j].hasOwnProperty('answer')) {

					this.assetKeys.push(j);

					if (service.assetPositions[j].answer.hasOwnProperty('answer')) {

						if (service.assetPositions[j].answer.center) {
							answer = service.game.add.text(this.staticAssets[j].width / 2,
								service.assetPositions[j].answer.y,
								service.assetPositions[j].answer.answer,
								service.data.answerStyles
							);

							answer.anchor.setTo(0.5, 0);

							if (service.data.answerStyles.hasOwnProperty('lineSpacing')) {
								answer.lineSpacing = service.data.answerStyles.lineSpacing;
							}
							

						} else {
							answer = service.game.add.text(service.assetPositions[j].answer.x,
								service.assetPositions[j].answer.y,
								service.assetPositions[j].answer.answer,
								service.data.answerStyles
							);

							if (service.data.answerStyles.hasOwnProperty('lineSpacing')) {
								answer.lineSpacing = service.data.answerStyles.lineSpacing;
							}
							
						}

						answer.alpha = 0;

						this.staticAssets[j].answer = answer;
						
						this.staticAssets[j].addChild(answer);
							
						// answer.updateText();

						// angular.forEach(service.data.answerStyles, function (value, key) {
						// 	if ('wordWrapWidth' === key)
						// 		answer.wordWrap = true;
						// 	answer[key] = value;
						// });

						// if (!service.done) {
						// 	answer.alpha = 0;
						// }
					} else if (angular.isArray(service.assetPositions[j].answer)) {
						this.assetKeys.push(j);

						angular.forEach(service.assetPositions[j].answer, function(a, k){
							answer = service.game.add.text(a.x,
								a.y, a.answer, service.data.answerStyles
							);

							if (service.data.answerStyles.hasOwnProperty('lineSpacing')) {
								answer.lineSpacing = service.data.answerStyles.lineSpacing;
							}

							
							self.staticAssets[j].addChild(answer);
						});
					}
				}

				if (service.assetPositions[j].hasOwnProperty('icons') && !service.assetPositions[j].noArrow) {
					this.arrows[j] = service.game.add.sprite(service.assetPositions[j].icons.x, service.assetPositions[j].icons.y, 'atlas', 'icon_arrow');
				}

				// If asset contains an image
				if (angular.isDefined(service.assetPositions[j].contentImage)) {
					var dropImage = service.assetPositions[j].contentImage,
						contentImage = service.game.add.sprite(dropImage.x, dropImage.y, 'atlas', dropImage.name);

					this.staticAssets[j].addChild(contentImage);
				}

				// If there's audio in the activity, this will load a layout
				if (angular.isDefined(service.assetPositions[j].audio)) {
					var groupIndex = this.targetGroups.push(service.game.add.group()) - 1;
					this.targetGroups[groupIndex].x = service.assetPositions[j].groupPositions.x;
					this.targetGroups[groupIndex].y = service.assetPositions[j].groupPositions.y;

					this.targetGroups[groupIndex].addChild(this.staticAssets[j]);
					this.initAudioLayout(this.targetGroups[groupIndex], service.assetPositions[j].audio);
				}
			}

			if (service.done) { return; }

			// Load Objects
			// Load Drop locations
			var drag, text, h, w;
			for (var i = 0; i < service.drops.length; i++) {
				// Load Wrong and Right icons
				this.right[i] = service.game.add.sprite(0, 0,'atlas', 'icon_right');
				this.right[i].alpha = 0;
				this.wrong[i] = service.game.add.sprite(0,0, 'atlas','icon_wrong');
				this.wrong[i].alpha = 0;

				// Load Drop location items
				if (service.data.shapeTarget) {
					// Load an invisible shape as the drop place
					this.dropItems[i] = this.shapeTarget(service.drops[i]);
				} else {
					this.dropItems[i] = service.game.add.sprite(service.drops[i].x, service.drops[i].y, 'atlas', service.drops[i].name);
				}

				if (service.data.singleTarget) {
					var totalItems = [];
					for (var ti = 0; ti < service.drops[i].totalItems; ti++) {
						totalItems.push({chances: 2});
					}
					service.drops[i].itemsProgress = totalItems;
				} else {
					service.drops[i].chances = 2;
				}

				if (service.drops[i].hasOwnProperty('text')) {
					staticText = service.game.add.text(service.drops[i].text.x,
						service.drops[i].text.y,
						service.drops[i].text.text
					);

					staticText.updateText();

					angular.forEach(service.data.dropTextStyles, function (value, key) {
						if ('wordWrapWidth' === key)
							staticText.wordWrap = true;
						staticText[key] = value;
					});

					staticText.font = 'Open Sans';

					if (service.data.dropTextStyles.hasOwnProperty('fontSize'))
						staticText.fontSize = service.data.dropTextStyles.fontSize;

					if (service.data.dropTextStyles.hasOwnProperty('fontWeight'))
						staticText.fontWeight = service.data.dropTextStyles.fontWeight;

					if (service.data.dropTextStyles.hasOwnProperty('wrap')) {
						staticText.wordWrap = true;
						staticText.wordWrapWidth = service.data.dropTextStyles.wrap;
					}

					if (service.data.dropTextStyles.hasOwnProperty('lineSpacing')) {
						staticText.lineSpacing = service.data.dropTextStyles.lineSpacing;
					}

					this.dropItems[i].addChild(staticText);
				}

				// If drop item contains an image
				if (angular.isDefined(service.drops[i].contentImage)) {
					var dropContainerImage = service.drops[i].contentImage,
						dropsContentImage = service.game.add.sprite(dropContainerImage.x, dropContainerImage.y, 'atlas', dropContainerImage.name);

					this.dropItems[i].addChild(dropsContentImage);
				}
			}


			// Load Draggable items
			var dragGroups;
			for (var k = 0; k < service.drags.length; k++) {
				this.dragItems[k] = service.game.add.sprite(service.drags[k].x, service.drags[k].y, 'atlas', service.drags[k].name);

				// dragGroups = service.game.add.group(this.dragItems[k]);

				if (service.drags[k].hasOwnProperty('text')) {

					if (service.drags[k].text.hasOwnProperty('x')) {
						text = service.game.add.text(service.drags[k].text.x,
							service.drags[k].text.y,
							service.drags[k].text.text,
							service.data.dragsData.styles
						);
					} else if (service.data.dragsData.center) {
						text = service.game.add.text(this.dragItems[k].width / 2,
							service.data.dragsData.y,
							service.drags[k].text.text,
							service.data.dragsData.styles
						);

						text.anchor.setTo(0.5, 0);
					} else {
						text = service.game.add.text(service.data.dragsData.x,
							service.data.dragsData.y,
							service.drags[k].text.text,
							service.data.dragsData.styles
						);
					}

					// text.updateText();

					if (service.data.dragsData.hasOwnProperty('wrap')) {
						text.wordWrap = true
						text.wordWrapWidth = service.data.dragsData.wrap;
					}

					if (service.data.dragsData.styles.hasOwnProperty('lineSpacing')) 
						text.lineSpacing = service.data.dragsData.styles.lineSpacing;

					// text.lineSpacing = -5;
					// text.anchor.setTo(0.5, 0.5);

					// dragGroups.add(text);
					this.dragItems[k].addChild(text);

					text = null;
				}

				if (service.data.singleTarget) {
					if (!this.singleTargetPositions.hasOwnProperty(service.drags[k].value.toString())) {
						this.singleTargetPositions[service.drags[k].value.toString()] = [];
					}

					service.drags[k].chancesKey = this.singleTargetPositions[service.drags[k].value.toString()].push(k) - 1;
				}

				if (service.drags[k].initialScale) {
					this.dragItems[k].scale.set(service.drags[k].initialScale.x, service.drags[k].initialScale.y);
				} else {
					this.dragItems[k].scale.set(1, 1);
				}
				this.dragItems[k].inputEnabled = true;
                this.dragItems[k].input.useHandCursor = true;
				this.dragItems[k].input.enableDrag();
				this.dragItems[k].events.onDragStart.add(this.onDragStart, this);
				this.dragItems[k].events.onDragStop.add(this.onValidateDrop, this);
			}
		},
		update: function () {
			if (this.currentSprite) {
				this.currentSprite.reset(service.game.input.mousePointer.x, service.game.input.mousePointer.y);
			}
		},
		onDragStart: function (sprite, pointer) {
			sprite.scale.setTo(1.2, 1.2);

			var index = this.dragItems.indexOf(sprite),
				drag = service.drags[index];

			if (drag.hasOwnProperty('initialScale')) {
			}

			if (drag.hasOwnProperty('activeScale')) {
				this.dragItems[index].anchor.setTo(0.5, 0.5);
				var scale = service.game.add.tween(sprite.scale).to({ x: drag.activeScale.x, y: drag.activeScale.y }, 200, Phaser.Easing.Ease, true);
				this.currentSprite = sprite;
			}
		},
		onValidateDrop: function (sprite, pointer) {
			sprite.scale.setTo(1, 1);
			sprite.anchor.setTo(0, 0);

			var index = this.dragItems.indexOf(sprite),
				drag = service.drags[index],
				validated = false,
				self = this,
				isRight = false,
				currentAnswer = false;

			if (drag.hasOwnProperty('activeScale')) {
				sprite.scale.setTo(drag.activeScale.x, drag.activeScale.x);
				this.currentSprite = false;
			}

			for (var i = 0; i < this.dropItems.length; i++) {
				if (false === sprite.overlap(this.dropItems[i])) { continue; }

				// if (service.data.shapeTarget) {
				// 	if (service.drops[i].x > pointer.x && (service.drops[i].x + service.drops[i].w) < pointer.x) {
				// 		if (service.drops[i].y < pointer.y && (service.drops[i].y + service.drops[i].h) > pointer.y) { break; }
				// 	}
				// }

				if (service.data.singleTarget) {
					if (0 === service.drops[i].itemsProgress[service.drags[index].chancesKey].chances)
						break;
				} else {
					if (0 === service.drops[i].chances) break;
				}

				validated = true;

				var indexAsset = (service.data.isDragValidation) ? this.assetKeys[index] : this.assetKeys[i],
					asset = service.assetPositions[indexAsset],
					assetSprite = this.staticAssets[indexAsset];


				if (!asset.noArrow) {
					this.arrows[indexAsset].alpha = 0;
				}

				// If the answers are multiple
				if (angular.isArray(asset.answer.value)) {
					var answerIndex = 0;

					answerIndex = asset.answer.value.indexOf(drag.value);

					if (-1 != answerIndex) {
						isRight = true;
						service.assetPositions[indexAsset].answer.value.splice(answerIndex, 1);
					} else if (asset.answer.hasOwnProperty('answer')) {
						currentAnswer = asset.answer.answer;
						delete asset.answer.answer;
					}
				}

				if (drag.value === asset.answer.answer || drag.value === asset.answer.value || drag.value === service.drops[i].value || isRight) {
					service.totalCounter++;
					service.rightAnswers++;

					var spriteTween = service.game.add.tween(sprite);

					if (angular.isArray(asset.answer.value) && currentAnswer) {
						asset.answer.answer = currentAnswer;
						currentAnswer = false;
					}

					if (drag.hasOwnProperty('finalResource')) {
						service.game.add.tween(sprite).to({ alpha: 0 }, 200, Phaser.Easing.Ease, true).onComplete.add(function () {
							sprite.loadTexture('atlas', drag.finalResource);
							service.game.add.tween(sprite).to({ alpha: 1 }, 200, Phaser.Easing.Ease, true)
						});
					}

					if (drag.hasOwnProperty('finalScale')) {
						service.game.add.tween(sprite.scale).to({ x: drag.finalScale.x, y: drag.finalScale.y }, 200, Phaser.Easing.Ease, true);
					}

					if (service.data.fixedPosition) {
						// service.game.add.tween(sprite).to({x: drag.finalPosition.x, y: drag.finalPosition.y}, 200, Phaser.Easing.Linear.Out, true);
						service.game.add.tween(sprite).to({ x: drag.finalPosition.x, y: drag.finalPosition.y }, 200, Phaser.Easing.Ease, true);
						// sprite.reset(drag.finalPosition.x, drag.finalPosition.y);

						if (angular.isDefined(asset.scale)) {
							service.game.add.tween(sprite.scale).to({x: asset.scale.x, y: asset.scale.y}, 200, Phaser.Easing.Elastic.Out, false);
						}
					} else {
						if (angular.isDefined(drag.text)) {
							service.game.add.tween(this.staticAssets[indexAsset].children[0]).to({ alpha: 1 }, 300, Phaser.Easing.Linear.In, true);	
						}

						spriteTween.to({ alpha: 0 }, 200, Phaser.Easing.Ease, false, 0, 1, true)
								   .to({ alpha: 0 }, 200, Phaser.Easing.Ease, false, 50)
								   .start();
					}

					if (angular.isObject(assetSprite.answer)) {
						assetSprite.answer.alpha = 1;
					}

					sprite.input.disableDrag();
					this.right[i].reset(asset.icons.x, asset.icons.y);
					var rightTween = service.game.add.tween(this.right[i]).to({ alpha: 1 }, 200, Phaser.Easing.Ease, false, 0, 1, true)
																		  .to({ alpha: 1 }, 200, Phaser.Easing.Ease, false, 50);
					if (service.data.singleTarget) {
						rightTween.to({alpha: 0}, 200, Phaser.Easing.Ease).start();
						rightTween.onComplete.add(function () {
							service.game.time.events.add(300, function () {
								if (asset.noArrow) { return; }
								self.arrows[indexAsset].alpha = 1;
							}, self);
							
						}, this);

						service.drops[i].itemsProgress[service.drags[index].chancesKey].chances = 0;
					} else if (angular.isArray(asset.answer)) {
						rightTween.to({alpha: 0}, 200, Phaser.Easing.Ease).start();
						rightTween.onComplete.add(function () {
							service.game.time.events.add(300, function () {
								if (asset.noArrow) { return; }
								self.arrows[indexAsset].alpha = 1;
							}, self);
							
						}, this);

						if (!service.data.noHideDrop) {
							service.game.add.tween(this.dropItems[i]).to({ alpha: 0 }, 200, Phaser.Easing.Ease, true, 0, 0, false);
						}
						service.drops[i].chances = 0;
					} else {
						rightTween.start();
						if (!service.data.noHideDrop) {
							service.game.add.tween(this.dropItems[i]).to({ alpha: 0 }, 200, Phaser.Easing.Ease, true, 0, 0, false);
						}
						service.drops[i].chances = 0;
					}

					this.rightAnswers++;

					if (service.data.targetChange && (i + 1) < service.drops.length) {
						service.game.time.events.add(1500, function () {
							if (asset.hasOwnProperty('audio'))
								this.changeTarget(this.targetGroups[i], this.targetGroups[i + 1], service.assetPositions[indexAsset + 1], i, sprite);	
							else
								this.changeTarget(this.dropItems[i], this.dropItems[i + 1], service.assetPositions[indexAsset + 1], i, sprite);
						}, this);
					}
					break;
				} else {
					var chances, hideWrong = function (wrongTween) {
						wrongTween.to({ alpha: 0 }, 200, Phaser.Easing.Ease, true, 50);

						wrongTween.onComplete.add(function () {
							service.game.time.events.add(200, function () {
								if (!asset.noArrow)
									self.arrows[indexAsset].alpha = 1;
							}, self);
						}, this);
					};

					if (service.data.singleTarget) {
						service.drops[i].itemsProgress[service.drags[index].chancesKey].chances--;
						chances = service.drops[i].itemsProgress[service.drags[index].chancesKey].chances;
					} else {
						service.drops[i].chances--;
						chances = service.drops[i].chances;
					}

					this.wrong[i].reset(asset.icons.x, asset.icons.y);

					var wrongTween = service.game.add.tween(this.wrong[i]).to({ alpha: 1 }, 200, Phaser.Easing.Ease, false, 0, 1, true)
																		  .to({ alpha: 1 }, 200, Phaser.Easing.Ease, false, 50);
					var self = this;

					if (0 === chances) {
						service.totalCounter++;

						if (!service.data.singleTarget) {
							if (!service.data.noHideDrop) {
								service.game.add.tween(this.dropItems[i]).to({ alpha: 0 }, 200, Phaser.Easing.Ease, true, 0, 0, false);
							}

							hideWrong(wrongTween);
						} else {
							sprite.input.useHandCursor = false;
							sprite.input.disableDrag();
						}

						if (angular.isObject(assetSprite.answer)) {
							assetSprite.answer.alpha = 1;
						}
						
						wrongTween.start();
						// this.staticAssets[indexAsset].children[1].alpha = 1;
						if (0 != this.staticAssets[indexAsset].children.length) {
							service.game.add.tween(this.staticAssets[indexAsset].children[0]).to({ alpha: 1 }, 300, Phaser.Easing.Linear.In, true);
						}

						if (service.data.isDragValidation) {
							// if (service.data.fixedPosition) {
							// 	service.game.add.tween(sprite).to({ x: drag.finalPosition.x, y: drag.finalPosition.y }, 200, Phaser.Easing.Ease, true);
							// }
						} else {
							service.game.add.tween(sprite).to({ x: drag.x, y: drag.y }, 200, Phaser.Easing.Ease, true);
						}

						if (drag.initialScale) {
							service.game.add.tween(sprite.scale).to({ x: drag.initialScale.x, y: drag.initialScale.y }, 200, Phaser.Easing.Ease, true);
						}

						if (service.data.targetChange) {
							service.game.time.events.add(1500, function () {
								this.changeTarget(this.targetGroups[i], this.targetGroups[i + 1], service.assetPositions[indexAsset + 1], i, false);
							}, this);
						}

						if (drag.hasOwnProperty('activeScale')) {
							service.game.add.tween(sprite.scale).to({ x: 1, y: 1 }, 200, Phaser.Easing.Ease, true);
						}
						break;
					} else {
						hideWrong(wrongTween);
						wrongTween.start();
					}

					service.game.add.tween(sprite).to({ x: drag.x, y: drag.y }, 200, Phaser.Easing.Ease, true);

					if (drag.hasOwnProperty('activeScale')) {
						service.game.add.tween(sprite.scale).to({ x: 1, y: 1 }, 200, Phaser.Easing.Ease, true);
					}

					if (drag.initialScale) {
						service.game.add.tween(sprite.scale).to({ x: drag.initialScale.x, y: drag.initialScale.y }, 200, Phaser.Easing.Ease, true);
					}

					break;
				}

            }

			if (!validated) {
				service.game.add.tween(sprite).to({ x: drag.x, y: drag.y }, 200, Phaser.Easing.Linear.Out, true);

				if (drag.initialScale) {
					service.game.add.tween(sprite.scale).to({ x: drag.initialScale.x, y: drag.initialScale.y }, 200, Phaser.Easing.Ease, true);
				}
			}

			if (drag.hasOwnProperty('activeScale')) {
				service.game.add.tween(sprite.scale).to({ x: 1, y: 1 }, 200, Phaser.Easing.Ease, true);
			}

			if (service.done) { return; }

			if (service.data.singleTarget) { 
				if (service.drags.length != service.totalCounter) { return; }
			} else {
            	if (service.drops.length != service.totalCounter) { return; }
            }

            service.updateUserProgress(service.totalCounter, service.rightAnswers);
		},
		initAudioLayout: function (group, data) {
			var audioLayout = service.game.add.sprite(data.x, data.y, 'atlas', data.name);

			if (data.hasOwnProperty('icon')) {
				var icon = service.game.add.sprite(data.icon.x, data.icon.y, 'atlas', data.icon.name);

				audioLayout.addChild(icon);
			}

			if (data.hasOwnProperty('text')) {
				var text = service.game.add.text(data.text.x, data.text.y, data.text.text, data.text.styles);

				audioLayout.addChild(text);
			}

			audioLayout.inputEnabled = true;
			audioLayout.input.useHandCursor = true;
			audioLayout.events.onInputDown.add(function (spr) {
				spr.loadTexture('atlas', data.active);

				if (null != this.audio) {
					this.audio.stop();
					this.audio.destroy();
					this.audio = null;
				}

				this.audio = service.game.add.audio(data.audioFile.name);
				this.audio.play();
			}, this);

			audioLayout.events.onInputUp.add(function (spr) {
				spr.loadTexture('atlas', data.name);
			}, this);

			group.addChild(audioLayout);
		},
		shapeTarget: function (data) {
			// var shape = service.game.add.graphics(0, 0),
			var	sprite = service.game.add.sprite(data.x, data.y);

			sprite.width = data.w;
			sprite.height = data.h;

			// shape.lineStyle(2, 0x0000FF, 1);
			// shape.drawRect(0, 0, data.w, data.h);

			// sprite.addChild(shape);

			return sprite;
		},
		changeTarget: function (current, next, nextAsset, dropIndex, dragItem) {
			this.right[dropIndex].alpha = 0;
			this.wrong[dropIndex].alpha = 0;
			this.dropItems[dropIndex].reset(99999, 99999);

			if (dragItem) {
				dragItem.reset(99999, 99999);
			}
			
			service.game.add.tween(current).to({ alpha:0 }, 200, Phaser.Easing.Ease).start().onComplete.add(function () {
				service.game.time.events.add(200, function () {
					current.x = 99999;
					current.y = 99999;
					next.alpha = 0;
					next.x = nextAsset.finalPosition.x;
					next.y = nextAsset.finalPosition.y;
					service.game.add.tween(next).to({ alpha: 1 }, 200, Phaser.Easing.Ease, true);
					this.dropItems[dropIndex + 1].reset(service.drops[dropIndex + 1].finalPosition.x, service.drops[dropIndex + 1].finalPosition.y);
				}, this);
			}, this);
		},
		resetProperties: function () {
			this.right = []; this.wrong =  []; this.arrows = []; this.dropItems = [];
			this.dragItems = []; this.staticAssets = []; this.rightAnswers = 0;
			this.assetKeys = [];
		}
	};

	return service;
});