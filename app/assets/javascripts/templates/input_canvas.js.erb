/**
 * Created by mateo on 4/12/14.
 */
prTemplates.directive('inputCanvas', ['formValidation', 'graphicService', function (formValidation, graphicService) {
    return {
        templateUrl: 'input_canvas.html',
        restrict: 'E',
        scope: {
            options: '=options'
        },
        link: function (scope, element, attrs) {
            scope.options.templateClass = 'input-canvas';

            formValidation.initialize(scope.options.pattern);

            for (var i = 0; i < scope.options.activity.items.length; i++) {
                scope.options.activity.items[i].chances = 2;
                scope.options.activity.items[i].classIcon = 'pr-icon-arrow';

                if (scope.options.activity.hasIcon) {
                    scope.options.activity.items[i].hasIcon = 'pr-icon-arrow';
                }
            }

            if (scope.options.activity.nested) {
                scope.options.items = scope.options.activity.items;
            }

            scope.$root.game = new Phaser.Game(scope.options.canvasData.width, scope.options.canvasData.height, Phaser.CANVAS, scope.options.activityName, null, true);

            scope.options.canvasData.atlasPath = scope.$root.resources + scope.options.canvasData.atlasMap;
            scope.options.canvasData.method = scope.options.method;

            graphicService(scope.options.canvasData, scope.$root.game);

            scope.validate = formValidation.validate;
        }
    };
}]);