prTemplates.directive('contentContainers', ['$sce', '$timeout', function ($sce, $timeout) {
	return {
		templateUrl: '_content_containers.html',
		transclude: true,
		// replace: true,
		restrict: 'E',
		scope: {
			options: '=options'
		},
		link: function (scope, element, attrs, ctrl, transclude) {
			if (angular.isUndefined(scope.options)) return;

			scope.image = scope.options.image;
			scope.alt = scope.options.alt;
			scope.bottomText = scope.options.bottomText;

			if (angular.isUndefined(scope.options.hasHeader)) {
				scope.options.hasHeader = true;
			}

			$timeout(function () {
				if (angular.isString(scope.options.text)) {
	                scope.options.text = $sce.trustAsHtml(scope.options.text);
	            }

	            if (angular.isString(scope.options.instruction)) {
	                scope.options.instruction = $sce.trustAsHtml(scope.options.instruction);
	            }

	            var $mainContent = angular.element('.' + scope.options.contentMainClass);

	            transclude(scope, function(clone, scope) {
					$mainContent.empty();
					$mainContent.append(clone);
				});
			});

			


			// var $header = angular.element('.pr-content-header'),
			// 	$instruction = angular.element('.pr-content-instruction'),
			// 	$main = angular.element('.pr-left-container'),
			// 	$title = $header.find('.pr-content-title'),
			// 	contWidth = scope.options.contWidth;

			// $instruction.css('width', contWidth + 'px');
			// $main.css('width', contWidth + 'px');
			// $title.css('width', contWidth - 80 + 'px');

			// if (scope.options.hasInstruction) {
			// 	$main.css('height', '200px');
			// 	$main.find('.pr-content-main').css('height', '144px');
			// }
		}
	};
}]);